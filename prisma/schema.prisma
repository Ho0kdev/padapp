generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id                   String          @id @default(cuid())
  name                 String?
  email                String          @unique
  emailVerified        DateTime?
  image                String?
  password             String?
  role                 UserRole        @default(PLAYER)
  status               UserStatus      @default(ACTIVE)
  createdAt            DateTime        @default(now())
  updatedAt            DateTime        @updatedAt
  accounts             Account[]
  categoryLogs         CategoryLog[]
  clubLogs             ClubLog[]
  courtLogs            CourtLog[]
  rankingLogs          RankingLog[]
  refereeMatches       Match[]         @relation("MatchReferee")
  notifications        Notification[]
  player               Player?
  sessions             Session[]
  tournamentLogs       TournamentLog[]
  organizerTournaments Tournament[]    @relation("TournamentOrganizer")

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Player {
  id                    String            @id @default(cuid())
  userId                String            @unique
  firstName             String
  lastName              String
  phone                 String?
  dateOfBirth           DateTime?
  gender                Gender?
  dominantHand          DominantHand?
  profileImageUrl       String?
  emergencyContactName  String?
  emergencyContactPhone String?
  bloodType             BloodType?
  medicalNotes          String?
  rankingPoints         Int               @default(0)
  primaryCategoryId     String?
  createdAt             DateTime          @default(now())
  updatedAt             DateTime          @updatedAt
  rankings              PlayerRanking[]
  rankingLogs           RankingLog[]
  primaryCategory       Category?         @relation("PlayerPrimaryCategory", fields: [primaryCategoryId], references: [id])
  user                  User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  team1Memberships      Team[]            @relation("TeamPlayer1")
  team2Memberships      Team[]            @relation("TeamPlayer2")
  tournamentStats       TournamentStats[]

  @@map("players")
}

model Club {
  id              String           @id @default(cuid())
  name            String
  description     String?
  address         String
  city            String
  state           String?
  country         String
  postalCode      String?
  phone           String?
  email           String?
  website         String?
  latitude        Float?
  longitude       Float?
  status          ClubStatus       @default(ACTIVE)
  logoUrl         String?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  logs            ClubLog[]
  courtLogs       CourtLog[]
  courts          Court[]
  tournamentClubs TournamentClub[]
  tournaments     Tournament[]     @relation("TournamentMainClub")

  @@map("clubs")
}

model Court {
  id                String       @id @default(cuid())
  clubId            String
  name              String
  surface           CourtSurface
  hasLighting       Boolean      @default(false)
  hasRoof           Boolean      @default(false)
  status            CourtStatus  @default(AVAILABLE)
  hourlyRate        Float?
  notes             String?
  deleted           Boolean      @default(false)
  deletedAt         DateTime?
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
  hasConcreteWall   Boolean      @default(false)
  hasNet4m          Boolean      @default(false)
  hasPanoramicGlass Boolean      @default(false)
  isOutdoor         Boolean      @default(false)
  logs              CourtLog[]
  club              Club         @relation(fields: [clubId], references: [id], onDelete: Cascade)
  matches           Match[]

  @@map("courts")
}

model Category {
  id                   String               @id @default(cuid())
  name                 String
  description          String?
  type                 CategoryType
  minAge               Int?
  maxAge               Int?
  genderRestriction    Gender?
  minRankingPoints     Int?
  maxRankingPoints     Int?
  isActive             Boolean              @default(true)
  createdAt            DateTime             @default(now())
  logs                 CategoryLog[]
  rankingLogs          RankingLog[]
  matches              Match[]
  rankings             PlayerRanking[]
  primaryPlayers       Player[]            @relation("PlayerPrimaryCategory")
  teams                Team[]
  tournamentCategories TournamentCategory[]
  zones                TournamentZone[]

  @@map("categories")
}

model PlayerRanking {
  id            String   @id @default(cuid())
  playerId      String
  categoryId    String
  currentPoints Int      @default(0)
  position      Int?
  seasonYear    Int
  lastUpdated   DateTime @default(now())
  category      Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  player        Player   @relation(fields: [playerId], references: [id], onDelete: Cascade)

  @@unique([playerId, categoryId, seasonYear])
  @@index([categoryId, seasonYear, currentPoints])
  @@index([playerId, seasonYear])
  @@index([currentPoints(sort: Desc)])
  @@map("player_rankings")
}

model Tournament {
  id                String               @id @default(cuid())
  name              String
  description       String?
  type              TournamentType
  status            TournamentStatus     @default(DRAFT)
  visibility        TournamentVisibility @default(PUBLIC)
  registrationStart DateTime?
  registrationEnd   DateTime?
  tournamentStart   DateTime
  tournamentEnd     DateTime?
  maxParticipants   Int?
  minParticipants   Int                  @default(4)
  registrationFee   Float                @default(0)
  prizePool         Float                @default(0)
  setsToWin         Int                  @default(2)
  gamesToWinSet     Int                  @default(6)
  tiebreakAt        Int                  @default(6)
  goldenPoint       Boolean              @default(true)
  organizerId       String
  mainClubId        String?
  rules             String?
  prizesDescription String?
  logoUrl           String?
  createdAt         DateTime             @default(now())
  updatedAt         DateTime             @updatedAt
  matches           Match[]
  notifications     Notification[]
  teams             Team[]
  categories        TournamentCategory[]
  clubs             TournamentClub[]
  logs              TournamentLog[]
  stats             TournamentStats[]
  zones             TournamentZone[]
  mainClub          Club?                @relation("TournamentMainClub", fields: [mainClubId], references: [id])
  organizer         User                 @relation("TournamentOrganizer", fields: [organizerId], references: [id])

  @@map("tournaments")
}

model TournamentClub {
  tournamentId String
  clubId       String
  club         Club       @relation(fields: [clubId], references: [id], onDelete: Cascade)
  tournament   Tournament @relation(fields: [tournamentId], references: [id], onDelete: Cascade)

  @@id([tournamentId, clubId])
  @@map("tournament_clubs")
}

model TournamentCategory {
  id              String     @id @default(cuid())
  tournamentId    String
  categoryId      String
  maxTeams        Int?
  registrationFee Float?
  prizePool       Float?
  teams           Team[]
  category        Category   @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  tournament      Tournament @relation(fields: [tournamentId], references: [id], onDelete: Cascade)

  @@unique([tournamentId, categoryId])
  @@index([tournamentId])
  @@index([categoryId])
  @@map("tournament_categories")
}

model Team {
  id                 String             @id @default(cuid())
  tournamentId       String
  categoryId         String
  name               String?
  player1Id          String
  player2Id          String
  registrationStatus RegistrationStatus @default(PENDING)
  registeredAt       DateTime           @default(now())
  seed               Int?
  notes              String?
  wonGames           MatchGame[]        @relation("GameWinner")
  wonSets            MatchSet[]         @relation("SetWinner")
  team1Matches       Match[]            @relation("MatchTeam1")
  team2Matches       Match[]            @relation("MatchTeam2")
  wonMatches         Match[]            @relation("MatchWinner")
  payments           TeamPayment[]
  category           Category           @relation(fields: [categoryId], references: [id])
  player1            Player             @relation("TeamPlayer1", fields: [player1Id], references: [id])
  player2            Player             @relation("TeamPlayer2", fields: [player2Id], references: [id])
  tournamentCategory TournamentCategory @relation(fields: [tournamentId, categoryId], references: [tournamentId, categoryId])
  tournament         Tournament         @relation(fields: [tournamentId], references: [id], onDelete: Cascade)
  zoneTeams          ZoneTeam[]

  @@index([tournamentId, categoryId])
  @@index([player1Id])
  @@index([player2Id])
  @@index([registrationStatus])
  @@map("teams")
}

model TeamPayment {
  id            String        @id @default(cuid())
  teamId        String
  amount        Float
  paymentStatus PaymentStatus @default(PENDING)
  paymentMethod String?
  transactionId String?
  paidAt        DateTime?
  createdAt     DateTime      @default(now())
  team          Team          @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@map("team_payments")
}

model TournamentZone {
  id           String     @id @default(cuid())
  tournamentId String
  categoryId   String
  name         String
  phaseType    PhaseType  @default(GROUP_STAGE)
  matches      Match[]
  category     Category   @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  tournament   Tournament @relation(fields: [tournamentId], references: [id], onDelete: Cascade)
  teams        ZoneTeam[]

  @@map("tournament_zones")
}

model ZoneTeam {
  zoneId   String
  teamId   String
  position Int?
  team     Team           @relation(fields: [teamId], references: [id], onDelete: Cascade)
  zone     TournamentZone @relation(fields: [zoneId], references: [id], onDelete: Cascade)

  @@id([zoneId, teamId])
  @@map("zone_teams")
}

model Match {
  id               String          @id @default(cuid())
  tournamentId     String
  categoryId       String
  zoneId           String?
  team1Id          String?
  team2Id          String?
  winnerTeamId     String?
  scheduledAt      DateTime?
  courtId          String?
  status           MatchStatus     @default(SCHEDULED)
  phaseType        PhaseType
  roundNumber      Int?
  matchNumber      Int?
  team1SetsWon     Int             @default(0)
  team2SetsWon     Int             @default(0)
  durationMinutes  Int?
  refereeId        String?
  notes            String?
  team1FromMatchId String?
  team2FromMatchId String?
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  sets             MatchSet[]
  category         Category        @relation(fields: [categoryId], references: [id])
  court            Court?          @relation(fields: [courtId], references: [id])
  referee          User?           @relation("MatchReferee", fields: [refereeId], references: [id])
  team1FromMatch   Match?          @relation("MatchProgression1", fields: [team1FromMatchId], references: [id])
  nextMatchesTeam1 Match[]         @relation("MatchProgression1")
  team1            Team?           @relation("MatchTeam1", fields: [team1Id], references: [id])
  team2FromMatch   Match?          @relation("MatchProgression2", fields: [team2FromMatchId], references: [id])
  nextMatchesTeam2 Match[]         @relation("MatchProgression2")
  team2            Team?           @relation("MatchTeam2", fields: [team2Id], references: [id])
  tournament       Tournament      @relation(fields: [tournamentId], references: [id], onDelete: Cascade)
  winnerTeam       Team?           @relation("MatchWinner", fields: [winnerTeamId], references: [id])
  zone             TournamentZone? @relation(fields: [zoneId], references: [id])
  notifications    Notification[]

  @@index([tournamentId, categoryId])
  @@index([status])
  @@index([scheduledAt])
  @@index([team1Id])
  @@index([team2Id])
  @@map("matches")
}

model MatchSet {
  id                  String      @id @default(cuid())
  matchId             String
  setNumber           Int
  team1Games          Int         @default(0)
  team2Games          Int         @default(0)
  team1TiebreakPoints Int?
  team2TiebreakPoints Int?
  winnerTeamId        String?
  completedAt         DateTime?
  games               MatchGame[]
  match               Match       @relation(fields: [matchId], references: [id], onDelete: Cascade)
  winnerTeam          Team?       @relation("SetWinner", fields: [winnerTeamId], references: [id])

  @@unique([matchId, setNumber])
  @@map("match_sets")
}

model MatchGame {
  id           String    @id @default(cuid())
  setId        String
  gameNumber   Int
  team1Points  Int       @default(0)
  team2Points  Int       @default(0)
  winnerTeamId String?
  isTiebreak   Boolean   @default(false)
  completedAt  DateTime?
  set          MatchSet  @relation(fields: [setId], references: [id], onDelete: Cascade)
  winnerTeam   Team?     @relation("GameWinner", fields: [winnerTeamId], references: [id])

  @@unique([setId, gameNumber])
  @@map("match_games")
}

model TournamentStats {
  id            String     @id @default(cuid())
  tournamentId  String
  playerId      String
  matchesPlayed Int        @default(0)
  matchesWon    Int        @default(0)
  setsWon       Int        @default(0)
  setsLost      Int        @default(0)
  gamesWon      Int        @default(0)
  gamesLost     Int        @default(0)
  pointsEarned  Int        @default(0)
  finalPosition Int?
  player        Player     @relation(fields: [playerId], references: [id], onDelete: Cascade)
  tournament    Tournament @relation(fields: [tournamentId], references: [id], onDelete: Cascade)

  @@unique([tournamentId, playerId])
  @@index([tournamentId])
  @@index([playerId])
  @@map("tournament_stats")
}

model Notification {
  id           String             @id @default(cuid())
  userId       String
  tournamentId String?
  matchId      String?
  type         NotificationType
  title        String
  message      String
  status       NotificationStatus @default(PENDING)
  sentAt       DateTime?
  readAt       DateTime?
  createdAt    DateTime           @default(now())
  match        Match?             @relation(fields: [matchId], references: [id])
  tournament   Tournament?        @relation(fields: [tournamentId], references: [id])
  user         User               @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

model TournamentLog {
  id           String      @id @default(cuid())
  action       LogAction
  description  String
  tournamentId String?
  userId       String
  ipAddress    String?
  userAgent    String?
  oldData      Json?
  newData      Json?
  metadata     Json?
  createdAt    DateTime    @default(now())
  tournament   Tournament? @relation(fields: [tournamentId], references: [id], onDelete: SetNull)
  user         User        @relation(fields: [userId], references: [id])

  @@index([tournamentId])
  @@index([userId])
  @@index([action])
  @@index([createdAt])
  @@map("tournament_logs")
}

model ClubLog {
  id          String    @id @default(cuid())
  action      LogAction
  description String
  clubId      String?
  userId      String
  ipAddress   String?
  userAgent   String?
  oldData     Json?
  newData     Json?
  metadata    Json?
  createdAt   DateTime  @default(now())
  club        Club?     @relation(fields: [clubId], references: [id], onDelete: Cascade)
  user        User      @relation(fields: [userId], references: [id])

  @@index([clubId])
  @@index([userId])
  @@index([action])
  @@index([createdAt])
  @@map("club_logs")
}

model CourtLog {
  id          String    @id @default(cuid())
  action      LogAction
  description String
  courtId     String?
  clubId      String?
  userId      String
  ipAddress   String?
  userAgent   String?
  oldData     Json?
  newData     Json?
  metadata    Json?
  createdAt   DateTime  @default(now())
  club        Club?     @relation(fields: [clubId], references: [id], onDelete: Cascade)
  court       Court?    @relation(fields: [courtId], references: [id], onDelete: Cascade)
  user        User      @relation(fields: [userId], references: [id])

  @@index([courtId])
  @@index([clubId])
  @@index([userId])
  @@index([action])
  @@index([createdAt])
  @@map("court_logs")
}

model CategoryLog {
  id          String    @id @default(cuid())
  action      LogAction
  description String
  categoryId  String?
  userId      String
  ipAddress   String?
  userAgent   String?
  oldData     Json?
  newData     Json?
  metadata    Json?
  createdAt   DateTime  @default(now())
  category    Category? @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  user        User      @relation(fields: [userId], references: [id])

  @@index([categoryId])
  @@index([userId])
  @@index([action])
  @@index([createdAt])
  @@map("category_logs")
}

model RankingLog {
  id         String         @id @default(cuid())
  action     LogAction
  description String
  rankingId  String?
  playerId   String?
  categoryId String?
  userId     String
  ipAddress  String?
  userAgent  String?
  oldData    Json?
  newData    Json?
  metadata   Json?
  createdAt  DateTime       @default(now())
  category   Category?      @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  player     Player?        @relation(fields: [playerId], references: [id], onDelete: Cascade)
  user       User           @relation(fields: [userId], references: [id])

  @@index([rankingId])
  @@index([playerId])
  @@index([categoryId])
  @@index([userId])
  @@index([action])
  @@index([createdAt])
  @@map("ranking_logs")
}

enum UserRole {
  ADMIN
  CLUB_ADMIN
  PLAYER
  REFEREE
}

enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
}

enum Gender {
  MALE
  FEMALE
  MIXED
}

enum DominantHand {
  RIGHT
  LEFT
  AMBIDEXTROUS
}

enum BloodType {
  A_POSITIVE
  A_NEGATIVE
  B_POSITIVE
  B_NEGATIVE
  AB_POSITIVE
  AB_NEGATIVE
  O_POSITIVE
  O_NEGATIVE
}

enum ClubStatus {
  ACTIVE
  INACTIVE
  MAINTENANCE
}

enum CourtSurface {
  CONCRETE
  ARTIFICIAL_GRASS
  CERAMIC
  OTHER
}

enum CourtStatus {
  AVAILABLE
  MAINTENANCE
  RESERVED
  UNAVAILABLE
}

enum CategoryType {
  AGE
  SKILL
  RANKING
  GENDER
  MIXED
}

enum TournamentType {
  SINGLE_ELIMINATION
  DOUBLE_ELIMINATION
  ROUND_ROBIN
  SWISS
  GROUP_STAGE_ELIMINATION
  AMERICANO
}

enum TournamentStatus {
  DRAFT
  PUBLISHED
  REGISTRATION_OPEN
  REGISTRATION_CLOSED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum TournamentVisibility {
  PUBLIC
  PRIVATE
  CLUB_MEMBERS
}

enum RegistrationStatus {
  PENDING
  CONFIRMED
  PAID
  CANCELLED
  WAITLIST
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}

enum PhaseType {
  GROUP_STAGE
  ROUND_OF_32
  ROUND_OF_16
  QUARTERFINALS
  SEMIFINALS
  FINAL
  THIRD_PLACE
}

enum MatchStatus {
  SCHEDULED
  IN_PROGRESS
  COMPLETED
  CANCELLED
  WALKOVER
}

enum NotificationType {
  MATCH_SCHEDULED
  MATCH_RESULT
  TOURNAMENT_UPDATE
  PAYMENT_REMINDER
  REGISTRATION_CONFIRMED
}

enum NotificationStatus {
  PENDING
  SENT
  READ
  FAILED
}

enum LogAction {
  TOURNAMENT_CREATED
  TOURNAMENT_UPDATED
  TOURNAMENT_DELETED
  TOURNAMENT_STATUS_CHANGED
  TEAM_REGISTERED
  TEAM_UNREGISTERED
  MATCH_CREATED
  MATCH_UPDATED
  MATCH_RESULT_ADDED
  USER_ACTION
  CLUB_CREATED
  CLUB_UPDATED
  CLUB_DELETED
  CLUB_STATUS_CHANGED
  COURT_CREATED
  COURT_UPDATED
  COURT_DELETED
  COURT_STATUS_CHANGED
  CATEGORY_CREATED
  CATEGORY_UPDATED
  CATEGORY_DELETED
  CATEGORY_STATUS_CHANGED
  RANKING_CREATED
  RANKING_UPDATED
  RANKING_DELETED
  POINTS_UPDATED
  POINTS_CALCULATED
  SEASON_UPDATED
  MANUAL_ADJUSTMENT
}
